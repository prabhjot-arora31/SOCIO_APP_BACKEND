<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chat</title>
    <style>
        
        * {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  /* color: red; */
}
header{
    background-color: black;
    color: white;
    display: flex;
    padding: 1.2rem;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;

}
.logo{
    width: 100px;
  margin: 0;
}
.logo img{
    width: 100%;
}
.main{
            max-width: 60%;
            min-width: 90%;
            background-color: #706ee3;
            height: 70vh;
            margin: 0 auto;
            margin-top: 70px;
            display: flex;
            justify-content: center;
            padding: 0.7rem;
            gap: 1.12rem;
            align-items: center;
            border-radius: 20px;
            scrollbar-width: none; /* For Firefox */
  -ms-overflow-style: none; 
  margin-bottom: 30px;
        }
        .main::-webkit-scrollbar{
            display: none;
        }
        .left::-webkit-scrollbar{
            display: none;
        }
        .main .left{
            height: 95%;
            border-radius: 20px;            
            width: 35%;
            background-color: azure;
            /* display: flex;
            flex-direction: column; */
            align-items: center;
            justify-content: center;
            gap: 9px;
            overflow-y: auto;
            padding: 0.75rem;
            /* flex-wrap: wrap; */
        }
        .right {
            flex: 1;
            height: 93%;
            background-color: #f0f0f0;
            border-radius: 20px;
            padding: 20px;
            float: right;
            overflow-y: auto;
            /* margin-top: 20px; */
            /* margin-bottom: 20px; */
            display: flex;
            flex-direction: column;
        }
.right::-webkit-scrollbar{
    display: none;
}
        .chat-area {
            flex: 1;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            padding: 10px;
        }

        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 60%;
            word-wrap: break-word;
        }

        .received {
            background-color: #e2e2e2;
            align-self: flex-start;
        }

        .sent {
            background-color: #add8e6;
            align-self: flex-end;
        }

        .input-area {
            display: flex;
            align-items: center;
            margin-top: 20px;
        }

        .input-area input[type="text"] {
            flex: 1;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            margin-right: 10px;
        }

        .input-area button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background-color: #4caf50;
            color: white;
            cursor: pointer;
        }
        .box{
            width: 90%;
            background-color: rgb(235, 228, 228);
            height: 100px;
            margin: 7px  auto;
            cursor: pointer;
            border-radius: 20px;
            align-items: center;
            gap: 20px;
            display: flex;
            justify-content: center;
        }
        @media screen and  (max-width: 470px) {
            .right{
                display: none;
                flex: 0;
            }
        }
    /* Media query for smaller screens */
    @media screen and (max-width: 768px) {
            .main {
                max-width: 90%;
                min-width: 90%;
                margin-top: 50px;
            }
            
            .left {
                width: 100%;
            }
            
            .right {
                width: 100%;
            }
        }

         /* Media query to hide right side for screens 700px or smaller */
         @media screen and (max-width: 700px) {
            .right {
                display: none;
            }
        }
   </style>
    
</head>
<body>
    <header id="header">
        <div class="logo">
            <img src="/logo.png" alt="Logo">
           </div>
        <h2>
           Socio App Chats <br/>
        </h2>
        <h4>

            <a style="text-decoration: none; color:  white; border: 2px solid white ; padding: 0.5rem; overflow: hidden; " href="https://socio-app-y5og.onrender.com/chats/">All Chats</a>
        </h4>
    </header>
    <div class="main">
        <div class="left">
            <% user.forEach((item) => { %>
                <div class="box" onclick="personalChat('<%= item._id %>')">
                    <div style="width: 60px;overflow: hidden; border-radius: 50%; height: 60px; ">
                        <img src="<%= item.profileImg %>" style="width: 100%;" alt="">
                    </div>
                    <%= item.name %>
                </div>
                <!-- Display other properties as needed -->
            <% }); %>
        </div>
        <div class="right">
            <div class="profilePicOfReceiver">
               
            </div>
            <!-- Chat area -->
            <div class="chat-area">
                <!-- Messages go here -->               
                <!-- More messages -->
            </div>
            
            <!-- Input area -->
            <div class="input-area">
                <input id="message" type="text" style="padding: 0.75rem;" placeholder="Type your message">
                <button style="padding: 0.75rem;" onclick="sendMsg()">Send</button>
            </div>
        </div>
       
    </div>
    
   
    <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
    <script>
    // Function to scroll to the bottom of the chat area
    function scrollToBottom() {
        const messagesContainer = document.querySelector('.chat-area');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Function to retrieve the receiver's profile picture
    function getProfilePicOfReceiver() {
        // Assuming the API endpoint is correct; replace 'extractedInfo' with the actual receiver ID
        fetch('https://socio-app-y5og.onrender.com/getProfilePic/' + extractedInfo)
            .then((data) => data.json())
            .then((data) => {
                console.log(data.pic);
                document.querySelector('.profilePicOfReceiver').innerHTML = `
                    <div style='width:130px; border-radius:50%;margin:0 auto;overflow:hidden;height:130px'>
                        <img style='width:100%' src='${data.pic}' alt='Profile Pic'/>
                    </div>`;
            });
    }

    // Function to handle the reception of new messages from the server
    const chatArea = document.querySelector('.chat-area');
    const socket = io('/chats/<%= chatId %>');

    socket.on('message', (dataFromServer) => {
        console.log('RECEIVING RTM');
        chatArea.innerHTML += `
            <div class="message received">
                <p>${dataFromServer.message}</p>
            </div>`;
        scrollToBottom();
    });

    // Function to display previous messages on loading the chat
    socket.on('previous-messages', (data) => {
        console.log('PM: ', data);
        if (data.length > 0) {
            data.forEach((item) => {
                // Assuming 'extractedInfo' and 'extractedInfo2' contain the correct user IDs
                if (item.sender === extractedInfo) {
                    chatArea.innerHTML += `
                        <div class="message received">
                            <p>${item.message}</p>
                        </div>`;
                } else if (item.sender === extractedInfo2) {
                    chatArea.innerHTML += `
                        <div class="message sent">
                            <p>${item.message}</p>
                        </div>`;
                }
            });
        }
        scrollToBottom();
    });

    // Joining the room for the chat
    socket.emit('joinRoom', extractedInfo2 + extractedInfo);

    // Emitting a private message to initiate the chat
    socket.emit('private-message', { receiver: extractedInfo, sender: extractedInfo2 });

    // Function to send a message
    function sendMsg() {
        const messageInput = document.getElementById("message").value;
        console.log(messageInput);
        document.getElementById("message").value = '';

        // Only emit the message if it's not empty
        if (messageInput !== '') {
            socket.emit('message', messageInput);
        }

        // Assuming that message sending should occur only after a successful emission
        chatArea.innerHTML += `
            <div class="message sent">
                <p>${messageInput}</p>
            </div>`;
        scrollToBottom();
    }
</script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Chat</title>
    <style>
        .timestamp{
            font-weight: lighter;
            font-size: 9.5px;
        }
        
        * {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  /* color: red; */
}
header{
    background-color: #706EE3;
    color: white;
    display: flex;
    padding: 1.2rem;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;

}
.logo{
    width: 100px;
  margin: 0;
}
.logo img{
    width: 100%;
}
.main{
            max-width: 60%;
            min-width: 90%;
            background-color: #706ee3;
            height: 90vh;
            margin: 0 auto;
            margin-top: 30px;
            display: flex;
            justify-content: center;
            padding: 0.7rem;
            gap: 1.12rem;
            align-items: center;
            border-radius: 20px;
            scrollbar-width: none; /* For Firefox */
  -ms-overflow-style: none; 
  margin-bottom: 30px;
        }
        .main::-webkit-scrollbar{
            display: none;
        }
        .left::-webkit-scrollbar{
            display: none;
        }
        .main .left{
            height: 95%;
            border-radius: 20px;            
            width: 35%;
            background-color: azure;
            /* display: flex;
            flex-direction: column; */
            align-items: center;
            justify-content: center;
            gap: 9px;
            overflow-y: auto;
            padding: 0.75rem;
            /* flex-wrap: wrap; */
        }
        .right {
            flex: 1;
            height: 93%;
            background-color: #f0f0f0;
            border-radius: 20px;
            padding: 20px;
            float: right;
            overflow-y: auto;
            /* margin-top: 20px; */
            /* margin-bottom: 20px; */
            display: flex;
            flex-direction: column;
        }
.right::-webkit-scrollbar{
    display: none;
}
        .chat-area {
            flex: 1;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            padding: 10px;
        }

        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 60%;
            word-wrap: break-word;
        }

        .received {
            background-color: #e2e2e2;
            align-self: flex-start;
        }

        .sent {
            background-color: #add8e6;
            align-self: flex-end;
        }

        .input-area {
            /* display: flex; */
            align-items: center;
            margin-top: 20px;
        }

        .input-area input[type="text"] {
            flex: 1;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            margin-right: 10px;
        }

        .input-area button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background-color: #4caf50;
            color: white;
            cursor: pointer;
        }
        .box{
            width: 90%;
            background-color: rgb(235, 228, 228);
            height: 100px;
            margin: 7px  auto;
            cursor: pointer;
            border-radius: 20px;
            align-items: center;
            gap: 20px;
            display: flex;
            justify-content: center;
        }
        
    /* Media query for smaller screens */
    @media screen and (max-width: 768px) {
            .main {
                max-width: 90%;
                min-width: 90%;
                margin-top: 50px;
            }
            
            .left {
                width: 100%;
            }
            
            .right {
                width: 100%;
            }
        }

         /* Media query to hide right side for screens 700px or smaller */
         @media screen and (max-width: 700px) {
            .left {
                display: none;
            }
        }
   </style>
    
</head>
<body>
    <header id="header">
        <div class="logo">
            <img src="/logo.png" alt="Logo">
           </div>
        <h2>
           Socio App Chats <br/>
        </h2>
        <h4>

            <a style="text-decoration: none; color:  white; border: 2px solid white ; padding: 0.5rem; overflow: hidden; " href="https://socio-app-backend-nine.vercel.app/home/<%= id %>">Home</a>
        </h4>
    </header>
    <div class="main">
        <div class="left">
            <% user.forEach((item) => { %>
                <div class="box" onclick="personalChat('<%= item._id %>')">
                    <div style="width: 60px;overflow: hidden; border-radius: 50%; height: 60px; ">
                        <img src="<%= item.profileImg %>" style="width: 100%;" alt="">
                    </div>
                    <%= item.name %>
                </div>
                <!-- Display other properties as needed -->
            <% }); %>
        </div>
        <div class="right">
            
            <div class="profilePicOfReceiver" style="margin-bottom: 10px; padding: 4px ;border-bottom: 2px solid black;">
               
            </div>
            <!-- Chat area -->
            <div class="chat-area">
                <!-- Messages go here -->               
                <!-- More messages -->
            </div>
            
            <!-- Input area -->
            
                <div style="display: flex; gap: 10px;">
                    <input style="flex: 1;" required id="message" type="text" style="padding: 0.75rem; padding: 0.43rem; " placeholder="Type your message">
                    
                    <button onclick="submit()" style="padding: 0.75rem; cursor: pointer; background-color: green; color: white; border: none; border-radius: 7px;">
                        <span id="buttonContent">Send</span>
                        <span id="loader" style="display: none;">&#9696;</span> <!-- Loader icon -->
                    
                    </button>
                </div>
            
        </div>
       
    </div>
    
   
    <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
    <script>
       
        const searchTerm = 'cHaT';
const fullPath = window.location.pathname;
const index = fullPath.indexOf(searchTerm);
let extractedInfo 
if (index !== -1) {
   extractedInfo = fullPath.substring(index + searchTerm.length);
   extractedInfo2 = fullPath.substring(7,fullPath.indexOf('cHaT'));
   console.log(extractedInfo2)
  console.log(extractedInfo); // This will log '658d29776efa0c2255cd1b7f'
} else {
  console.log('Search term not found');
}
function scrollToBottom() {
  const messagesContainer = document.querySelector('.chat-area');
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}
function getProfilePicOfReceiver(){
            fetch('https://socio-app-backend-nine.vercel.app/getProfilePic/'+extractedInfo).then((data)=>{
            //   console.log('DATA IS HERE:', data.json())
            return data.json();
            }).then((data)=>{
                console.log(data.pic)
                document.querySelector('.profilePicOfReceiver').innerHTML = `<div style='display:flex;gap:20px;justify-content:center;margin-left:auto;margin-right:auto;align-items:center'><div style='width:85px ; border-bottom:1px solid black ; border-radius:50%;overflow:hidden;height:85px'><img style='width:100%' src='${data.pic}' alt='Profile Pic'/></div>
             <h2>${data.name}</h2>   </div>
                `;
            })
        }
        getProfilePicOfReceiver();
const chatArea = document.querySelector('.chat-area');
        const socket = io('/chats/<%= chatId %>'); // Connect to Socket.IO server
socket.on('message',(dataFromServer)=>{
console.log('RECEIVING RTM')
            chatArea.innerHTML += ` <div class="message received">
                <p>${dataFromServer.message}</p>
                     </div>`;
                     scrollToBottom();
        })
socket.on('previous-messages', (data) => {
 // console.log('PM: ', data);
  if (data.length > 0) {
    data.forEach((item) => {
      if (item.sender === extractedInfo) {
        // Message sent by the user whose profile is being viewed (receiver)
        chatArea.innerHTML += `
          <div class="message received">
            <p>${item.message}</p>
            <span class='timestamp'>${timestampConverter(item.timestamp)}</span>
          </div>`;
} else if (item.sender === extractedInfo2) {
        // Message sent by the logged-in user (sender)
        chatArea.innerHTML += `
          <div class="message sent">
            <p>${item.message}</p>
            <span class='timestamp' style='text-align:right'>${timestampConverter(item.timestamp)}</span>
          </div>`;
      }
    });
  }
  scrollToBottom();
});

socket.emit('joinRoom',extractedInfo2+extractedInfo);
function personalChat(chatWithWhomId)
        {
            withWhomId = chatWithWhomId;
            console.log("PersonalChat")
            location.href = 'https://socio-app-backend-nine.vercel.app/chats/<%= id %>cHaT'+chatWithWhomId;
        }
        socket.emit('private-message',{receiver:extractedInfo,sender:extractedInfo2});
      
        
//         const messageInput = document.getElementById("message").value;
//             console.log(messageInput);
//             document.getElementById("message").value = '';
//             chatArea.innerHTML += ` <div class="message sent">
//                 <p>${messageInput}</p>
//                      </div>`;
// console.log('Chat ID from server is returned: <%= chatId %>');
//         if(messageInput !== '')
//         socket.emit('message',messageInput);
//     scrollToBottom();      
const submit = async () => {
    const sendButton = document.getElementById("sendButton");
    const loader = document.getElementById("loader");
    const buttonContent = document.getElementById("buttonContent");
    
    buttonContent.style.display = "none"; // Hide the "Send" text
    loader.style.display = "inline-block"; // Show the loader icon

    const message = document.getElementById("message").value;
    console.log('yo done');
   // console.log(extractedInfo2, extractedInfo); // 2 is sender

    try {
        const response = await fetch('https://socio-app-backend-nine.vercel.app/chatReceiver', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ sender: extractedInfo2, receiver: extractedInfo, message: message })
        });

        if (!response.ok) {
            throw new Error('Network response was not ok.');
        }

        const realData = await response.json();
      //  console.log(realData);
        chatAreaUpdate = document.querySelector('.chat-area');
        chatAreaUpdate.innerHTML += `<div class='message sent'><p>${realData.data.message}</p>
            <span class='timestamp'> ${timestampConverter(realData.data.timestamp)}</span>
           </div>`;
        socket.emit('newChat', realData.data);
    } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
    }

    // Reset button and input after fetching data
    buttonContent.style.display = "inline-block"; // Show the "Send" text
    loader.style.display = "none"; // Hide the loader icon
    document.getElementById("message").value = '';
    scrollToBottom()
}

                    socket.on('loadNewChat',(data)=>{
                        console.log('sender:',extractedInfo2)
                        console.log('receiver:',extractedInfo)
                        console.log('Load New Chat Event Fired.......:',data)
                        if(extractedInfo2 === data.receiver && extractedInfo === data.sender)
                        {
                            console.log('Proceed')
                            chatAreaUpdate2 = document.querySelector('.chat-area');
    chatAreaUpdate2.innerHTML += `<div class='message received'><p>${data.message}</p><span class='timestamp'>${timestampConverter(data.timestamp)}</span></div>`;
                        }
    scrollToBottom()

                    })
                    function timestampConverter(timestamp)
                    {
                        const date = new Date(timestamp);
const formattedTime = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
return formattedTime;
                    }
    </script>

</body>
</html>
